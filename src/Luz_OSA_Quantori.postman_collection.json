{
	"info": {
		"_postman_id": "65275d3d-4209-404d-9a90-ea5da5a2d7ab",
		"name": "Luz_OSA_Quantori",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29461211",
		"_collection_link": "https://www.postman.com/research-astronomer-10386986/workspace/quantori-class/collection/29461211-65275d3d-4209-404d-9a90-ea5da5a2d7ab?action=share&source=collection_link&creator=29461211"
	},
	"item": [
		{
			"name": "lecture-1",
			"item": [
				{
					"name": "User creation",
					"item": [
						{
							"name": "Authorization for user creation tests",
							"item": [
								{
									"name": "Receive admin token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Receive admin accesstoken\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"token_1\", jsonData.accessToken);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "6cXJLPzVLV=Y4h+_",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create admin account with admin credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 1\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"// Updating the username and password of admin in the collection variables\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"admin_username_1\", jsonData.username);\r",
													"var requestBody = JSON.parse(pm.request.body.raw);\r",
													"var extractedValue = requestBody.password;\r",
													"pm.collectionVariables.set(\"admin_password_1\", extractedValue);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set the Authorization header\r",
													"var bearerToken = \"{{token_1}}\";\r",
													"\r",
													"pm.request.headers.add({\r",
													"    key: 'Authorization',\r",
													"    value: 'Bearer ' + bearerToken\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"admin\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Receive token of created admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Receive created admin accesstoken\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"admin_token_1\", jsonData.accessToken);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{admin_username_1}}\",\r\n    \"password\": \"{{admin_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating admin account without admin credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Unauthorized' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"admin\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create teacher account with admin credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set the Authorization header\r",
													"var bearerToken = \"{{admin_token_1}}\";\r",
													"\r",
													"pm.request.headers.add({\r",
													"    key: 'Authorization',\r",
													"    value: 'Bearer ' + bearerToken\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 2\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create teacher account without admin credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 2\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"// Updating the username and password of teacher in the collection variables\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"teacher_username_1\", jsonData.username);\r",
													"var requestBody = JSON.parse(pm.request.body.raw);\r",
													"var extractedValue = requestBody.password;\r",
													"pm.collectionVariables.set(\"teacher_password_1\", extractedValue);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Receive teacher token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Receive created teacher accesstoken\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"teacher_token_1\", jsonData.accessToken);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{teacher_username_1}}\",\r\n    \"password\": \"{{teacher_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create student account with admin credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set the Authorization header\r",
													"var bearerToken = \"{{admin_token_1}}\";\r",
													"\r",
													"pm.request.headers.add({\r",
													"    key: 'Authorization',\r",
													"    value: 'Bearer ' + bearerToken\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create student account without admin credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"// Updating the username and password of student in the collection variables\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"student_username_1\", jsonData.username);\r",
													"var requestBody = JSON.parse(pm.request.body.raw);\r",
													"var extractedValue = requestBody.password;\r",
													"pm.collectionVariables.set(\"student_password_1\", extractedValue);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Receive student token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Receive created student accesstoken\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"student_token_1\", jsonData.accessToken);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{student_username_1}}\",\r\n    \"password\": \"{{student_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Username text field tests",
							"item": [
								{
									"name": "Error when creating new user with no username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum username length is: 3' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum username length is: 3\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with only spaces on username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with only spaces on username field\r",
													"// 2 bugs = worng status code, should be 400; Error message with minimum username length should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'You are not allowed to use spaces only on username field' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only on username field\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random number between 1 and 255\r",
													"var numberOfSpaces = Math.floor(Math.random() * 252) + 3;\r",
													"\r",
													"var spaces = ' '.repeat(numberOfSpaces);\r",
													"\r",
													"// Set the value as an environment variable (optional)\r",
													"pm.environment.set('generatedSpaces', spaces);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{generatedSpaces}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with a 2 characters username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum username length is: 3' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum username length is: 3\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 3 characters username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 4 characters username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 254 characters username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{254charac}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 255 characters username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{255charac}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with a 256 characters username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Maximum username length is: 255' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum username length is: 255\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{256charac}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with existing username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'User with such credentials already exist' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"User with such credentials already exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"john-teacher\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "firstName text field tests",
							"item": [
								{
									"name": "Error when creating new user without firstName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with firstName field empty\r",
													"// 2 bugs = worng status code, should be 400; Error message with minimum firstName length should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum firstName length is: 2' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum firstName length is: 2\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with only spaces on firstname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with only spaces on firstName field\r",
													"// 2 bugs = worng status code, should be 400; Error message with minimum firstName length should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'You are not allowed to use spaces only on firstName field' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only on firstName field\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"            \",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 1 letter firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 1-character random string\r",
													"var LatinLettersString_1charac = generateRandomString(1); \r",
													"pm.environment.set('LatinLettersString_1charac', LatinLettersString_1charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{LatinLettersString_1charac}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 2 letters firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 2-character random string\r",
													"var LatinLettersString_2charac = generateRandomString(2); \r",
													"pm.environment.set('LatinLettersString_2charac', LatinLettersString_2charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{LatinLettersString_2charac}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 254 letters firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 254-character random string\r",
													"var LatinLettersString_254charac = generateRandomString(254); \r",
													"pm.environment.set('LatinLettersString_254charac', LatinLettersString_254charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{LatinLettersString_254charac}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 255 letters  firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 255-character random string\r",
													"var LatinLettersString_255charac = generateRandomString(255); \r",
													"pm.environment.set('LatinLettersString_255charac', LatinLettersString_255charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{LatinLettersString_255charac}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with a 256 letters firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 256-character random string\r",
													"var LatinLettersString_256charac = generateRandomString(256); \r",
													"pm.environment.set('LatinLettersString_256charac', LatinLettersString_256charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Bug = worng status code, should be 400; \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Unable to create user: SequelizeDatabaseError: value too long for type character varying(255)\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to create user: SequelizeDatabaseError: value too long for type character varying(255)\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{LatinLettersString_256charac}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with a special characters on firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 3-character random string\r",
													"var LatinLettersString_3charac = generateRandomString(3); \r",
													"pm.environment.set('LatinLettersString_3charac', LatinLettersString_3charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with special characters on firstName field\r",
													"// 2 bugs = worng status code, should be 400; Error message realated with special characters on firstName field should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Parameter should be Latin letters' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Parameter should be Latin letters\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{LatinLettersString_3charac}}_{{LatinLettersString_3charac}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with digits on firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 3-character random string\r",
													"var LatinLettersString_3charac = generateRandomString(3); \r",
													"pm.environment.set('LatinLettersString_3charac', LatinLettersString_3charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with digits on firstName field\r",
													"// 2 bugs = worng status code, should be 400; Error message realated with special characters on firstName field should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Parameter should be Latin letters' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Parameter should be Latin letters\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{LatinLettersString_3charac}}12{{LatinLettersString_3charac}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with booleanon firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 3-character random string\r",
													"var LatinLettersString_3charac = generateRandomString(3); \r",
													"pm.environment.set('LatinLettersString_3charac', LatinLettersString_3charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with boolean on firstName field\r",
													"// 2 bugs = worng status code, should be 400; Error message realated with boolean on firstName field should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Parameter should be a string' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Parameter should be a string\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": true,\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "lastName text field tests",
							"item": [
								{
									"name": "Error when creating new user without lastName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with lastName field empty\r",
													"// 2 bugs = worng status code, should be 400; Error message with minimum lastName length should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum lastName length is: 2' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum lastName length is: 2\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with only spaces on last name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with only spaces on lastName field\r",
													"// 2 bugs = worng status code, should be 400; Error message with minimum lastName length should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'You are not allowed to use spaces only on lastName field' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only on lastName field\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"              \",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 1 letter lastName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 1-character random string\r",
													"var LatinLettersString_1charac = generateRandomString(1); \r",
													"pm.environment.set('LatinLettersString_1charac', LatinLettersString_1charac);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{LatinLettersString_1charac}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 2 letter lastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 2-character random string\r",
													"var LatinLettersString_2charac = generateRandomString(2); \r",
													"pm.environment.set('LatinLettersString_2charac', LatinLettersString_2charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{LatinLettersString_2charac}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 254 letters lastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 254-character random string\r",
													"var LatinLettersString_254charac = generateRandomString(254); \r",
													"pm.environment.set('LatinLettersString_254charac', LatinLettersString_254charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{LatinLettersString_254charac}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 255 letters lastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 255-character random string\r",
													"var LatinLettersString_255charac = generateRandomString(255); \r",
													"pm.environment.set('LatinLettersString_255charac', LatinLettersString_255charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{LatinLettersString_255charac}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 256 letters lastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 256-character random string\r",
													"var LatinLettersString_256charac = generateRandomString(256); \r",
													"pm.environment.set('LatinLettersString_256charac', LatinLettersString_256charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Bug = worng status code, should be 400; \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Unable to create user: SequelizeDatabaseError: value too long for type character varying(255)\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to create user: SequelizeDatabaseError: value too long for type character varying(255)\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{LatinLettersString_256charac}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with a special characters on lastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 3-character random string\r",
													"var LatinLettersString_3charac = generateRandomString(3); \r",
													"pm.environment.set('LatinLettersString_3charac', LatinLettersString_3charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with special characters on lastName field\r",
													"// 2 bugs = worng status code, should be 400; Error message realated with special characters on lastName field should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Parameter should be Latin letters' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Parameter should be Latin letters\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{LatinLettersString_3charac}}_{{LatinLettersString_3charac}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with digits on lastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 3-character random string\r",
													"var LatinLettersString_3charac = generateRandomString(3); \r",
													"pm.environment.set('LatinLettersString_3charac', LatinLettersString_3charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with special characters on lastName field\r",
													"// 2 bugs = worng status code, should be 400; Error message realated with special characters on lastName field should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Parameter should be Latin letters' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Parameter should be Latin letters\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{LatinLettersString_3charac}}12{{LatinLettersString_3charac}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with booleanon lastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 3-character random string\r",
													"var LatinLettersString_3charac = generateRandomString(3); \r",
													"pm.environment.set('LatinLettersString_3charac', LatinLettersString_3charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// User shouldn't be able to create account with boolean on lastName field\r",
													"// 2 bugs = worng status code, should be 400; Error message realated with boolean on lastName field should be presented \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Parameter should be a string' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Parameter should be a string\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{LatinLettersString_3charac}}12{{LatinLettersString_3charac}}\",\r\n\"lastName\": true,\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "email text field tests",
							"item": [
								{
									"name": "Error when creating new user without email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Invalid value' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Invalid value\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user without email address's local-part",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Invalid value' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Invalid value\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user without email address's domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Invalid value' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Invalid value\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with existing email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'User with such credentials already exist' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"User with such credentials already exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"jsmith@gmail.com\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "password text field tests",
							"item": [
								{
									"name": "Error when creating new user without password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum password length is: 8' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum password length is: 8\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with 7 characters password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum password length is: 8' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum password length is: 8\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{7charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with 8 characters password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{8charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with 9 characters password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{9charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 19 characters password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{19charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a 20 characters password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{20charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating  new user with a 21 characters password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Maximum password length is: 20' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum password length is: 20\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{21charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a password without digits",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 8-character random string\r",
													"var LatinLettersString_8charac = generateRandomString(8); \r",
													"pm.environment.set('LatinLettersString_8charac', LatinLettersString_8charac);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{LatinLettersString_8charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a password without special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const lettersanddigits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += lettersanddigits.charAt(Math.floor(Math.random() * lettersanddigits.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 8-character random string\r",
													"var LatinLettersanddigitsString_8charac = generateRandomString(8); \r",
													"pm.environment.set('LatinLettersanddigitsString_8charac', LatinLettersanddigitsString_8charac);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{LatinLettersanddigitsString_8charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new user with a password without letters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const digitsandspecialcharacters = '123456789,._-/*+-()=/';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += digitsandspecialcharacters.charAt(Math.floor(Math.random() * digitsandspecialcharacters.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 8-character random string\r",
													"var digitsandspecialcharactersString_8charac = generateRandomString(8); \r",
													"pm.environment.set('digitsandspecialcharactersString_8charac', digitsandspecialcharactersString_8charac);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Username is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"username\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"email is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"email\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"firstName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"lastName\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"role\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Role value is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.role).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{digitsandspecialcharactersString_8charac}}\",\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with a number value on password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Unable to create user: Error: Illegal arguments: number, string' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to create user: Error: Illegal arguments: number, string\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": 123456789,\r\n\"role\": \"student\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "role text field tests",
							"item": [
								{
									"name": "Error when creating new user without role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Wrong role, please send the right role: student,teacher,admin' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Wrong role, please send the right role: student,teacher,admin\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with spaces on role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Wrong role, please send the right role: student,teacher,admin' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Wrong role, please send the right role: student,teacher,admin\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"    \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating new user with invalid role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Wrong role, please send the right role: student,teacher,admin' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Wrong role, please send the right role: student,teacher,admin\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Testing different methods for /api/v1/session endpoint",
							"item": [
								{
									"name": "Receive token of created admin with OPTIONS method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{admin_username_1}}\",\r\n    \"password\": \"{{admin_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Receive token of created admin with GET method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{admin_username_1}}\",\r\n    \"password\": \"{{admin_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Receive token of created admin with PUT method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{admin_username_1}}\",\r\n    \"password\": \"{{admin_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Receive token of created admin with PATCH method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{admin_username_1}}\",\r\n    \"password\": \"{{admin_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Receive token of created admin with DELETE method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{admin_username_1}}\",\r\n    \"password\": \"{{admin_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Receive token of created admin with HEAD method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "HEAD",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{admin_username_1}}\",\r\n    \"password\": \"{{admin_password_1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Testing different methods for /api/v1/users endpoint",
							"item": [
								{
									"name": "Create teacher account with OPTIONS method",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create teacher account with GET method",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create teacher account with PUT method",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create teacher account with PATCH method",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create teacher account with DELETE method",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create teacher account with DELETE method Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "HEAD",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Manage/Check category",
					"item": [
						{
							"name": "Creation of category by different user",
							"item": [
								{
									"name": "Create category as admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"// Updating the category id in the collection variables\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"category_id\", jsonData.id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category as teacher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'This action is forbidden for role teacher' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role teacher\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category as student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'This action is forbidden for role student' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{student_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Category title tests",
							"item": [
								{
									"name": "Error when creating category without title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum category length is: 3' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum category length is: 3\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category with existing  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'title should be unique' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"title should be unique\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Automation courses\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category with only spaces on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'You are not allowed to use spaces only' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"       \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category with 2 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"pm.collectionVariables.get(\"variable_key\");\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum category length is: 3' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum category length is: 3\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates category with 3 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"// Updating the category id in the collection variables\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"category_id1\", jsonData.id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates category with 4 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates category with 99 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{99charac}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates catergory with 100 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{100charac}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category with 101 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Maximum category length is: 100' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum category length is: 100\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{101charac}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates catergory with special characters on name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const specialcharacter = ',._-/*+-()=/';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += specialcharacter.charAt(Math.floor(Math.random() * specialcharacter.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 1-special character random string\r",
													"var specialcharacter = generateRandomString(1); \r",
													"pm.environment.set('specialcharacter', specialcharacter);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Only RU/EN alphabet, space and digits allowed, please change your request' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Only RU/EN alphabet, space and digits allowed, please change your request\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics {{specialcharacter}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check categories tests",
							"item": [
								{
									"name": "Check list of categories tests",
									"item": [
										{
											"name": "Admin gets list of categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token_1}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Teacher gets list of categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token_1}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Student gets list of categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{student_token_1}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Check categories by id tests",
									"item": [
										{
											"name": "Admin gets category by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is present in reponse\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token_1}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories/{{category_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"{{category_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Teacher gets category by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is present in reponse\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token_1}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories/{{category_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"{{category_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Student gets category by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is present in reponse\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{student_token_1}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories/{{category_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"{{category_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Change category title tests",
							"item": [
								{
									"name": "Admin change category title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when teacher changes category title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'This action is forbidden for role teacher' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role teacher\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when Student changes category title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'This action is forbidden for role student' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{student_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category without title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum category length is: 3' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum category length is: 3\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when changing a category with existing  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = Error should be 400: Error message should be more clear, such as \"title should be unique\".  \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Title already exists' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Title already exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"Automation courses\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category with only spaces on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'You are not allowed to use spaces only' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"        \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category with 2 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Minimum category length is: 3' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum category length is: 3\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates category with 3 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates category with 4 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates category with 99 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"{{99charac}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates catergory with 100 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Title is present in reponse\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"{{100charac}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when creating category with 101 characters on  title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Maximum category length is: 100' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum category length is: 100\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"{{101charac}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin creates catergory with special characters on name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    const specialcharacter = ',._-/*+-()=/';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += specialcharacter.charAt(Math.floor(Math.random() * specialcharacter.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generates a 1-special character random string\r",
													"var specialcharacter = generateRandomString(1); \r",
													"pm.environment.set('specialcharacter', specialcharacter);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Only RU/EN alphabet, space and digits allowed, please change your request' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Only RU/EN alphabet, space and digits allowed, please change your request\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{category_id}},\r\n    \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics {{specialcharacter}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete category tests",
							"item": [
								{
									"name": "Admin remove category by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Message 'Success: record was removed.' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories/{{category_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{category_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Teacher remove category by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'This action is forbidden for role teacher' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role teacher\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories/{{category_id1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{category_id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Student remove category by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'This action is forbidden for role student' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{student_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories/{{category_id1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{category_id1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Testing different methods for /api/v1/categories endpoint",
							"item": [
								{
									"name": "endpoint with OPTIONS method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "endpoint with PUT method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "endpoint with DELETE method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "endpoint with HEAD method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "HEAD",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Testing different methods for /api/v1/categories/{categoryId} endpoint",
							"item": [
								{
									"name": "endpoint with OPTIONS method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories/{{category_id1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{category_id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "endpoint with POST method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories/{{category_id1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{category_id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "endpoint with PUT method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories/{{category_id1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{category_id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "endpoint with PATCH method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories/{{category_id1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{category_id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "endpoint with HEAD method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "HEAD",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories/{{category_id1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{category_id1}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "lecture-2",
			"item": [
				{
					"name": "Setup for testing the endpoints related with courses",
					"item": [
						{
							"name": "Receive admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "6cXJLPzVLV=Y4h+_",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin account with admin credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of admin in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"admin_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"admin_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive token of created admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"admin_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{admin_username}}\",\r\n    \"password\": \"{{admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create teacher account without admin credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of admin in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"teacher_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"teacher_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive teacher token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created teacher accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"teacher_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{teacher_username}}\",\r\n    \"password\": \"{{teacher_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create student account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 errors= Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(3);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of admin in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"student_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"student_password\", extractedValue);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive student token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created student accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"student_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{student_username}}\",\r\n    \"password\": \"{{student_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create catergory as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"title is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating generated category id in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"cat_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Ways to cook {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course creation",
					"item": [
						{
							"name": "Course creation by different users",
							"item": [
								{
									"name": "Create course as admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Course id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course title is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Category id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"categoryId\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course description is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"description\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course visibility is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"visible\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"// Updating generated dourse id in the collection variables\r",
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"course_id1\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create course as teacher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Course id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course title is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Category id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"categoryId\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course description is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"description\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course visibility is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"visible\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"// Updating generated course id, title and description in the collection variables\r",
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"course_id2\", jsonData.id);\r",
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"course_title1\", jsonData.title);\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"course_description\", jsonData.description);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when create course as student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'This action is forbidden for role student' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{student_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when create course with no token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Unauthorized' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Creating courses as teacher",
							"item": [
								{
									"name": "Title text field testing",
									"item": [
										{
											"name": "Error when creating a course with no title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Minimum course title length is: 3' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum course title length is: 3\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating a course with only spaces on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'You are not allowed to use spaces only' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"      \",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating a course with 2 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Minimum course title length is: 3' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum course title length is: 3\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with 3 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"course_id3\", jsonData.id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with 4 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"course_id4\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with 99 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"course_id5\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{99charac}}\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with 100 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"pm.collectionVariables.set(\"course_id6\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{100charac}}\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating a course with 101 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Maximum course title length is: 100' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum course title length is: 100\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{101charac}}\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with special characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}_{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating a course with existing title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'title should be unique' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.eql(\"title should be unique\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{course_title1}}\",\r\n  \"description\": \"Washing my {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Description text field testing",
									"item": [
										{
											"name": "Error when creating a course with no description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Minimum course description length is: 3' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum course description length is: 3\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating a course with only spaces on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Bug: Course shouldn't be created with only spaces on description text field and due to that the status code should be 400\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'You are not allowed to use spaces only' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"     \",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating a course with 2 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Minimum course description length is: 3\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum course description length is: 3\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with 3 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with 4 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with 499 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{499charac}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with 500 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{500charac}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating a course with 501 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Maximum course description length is: 500\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum course description length is: 500\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{501charac}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with special characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}_{{$randomAlphaNumeric}}/{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}:;\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a course with existing description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{course_description}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Visible boolean field testing",
									"item": [
										{
											"name": "Create course with visibility false",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": false,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating course with characters on visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating course with spaces on visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": \"     \",\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating course with digits on visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": 123,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating course with empty visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": \"\",\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating course with null on visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": null,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CategoryID field testing",
									"item": [
										{
											"name": "Error when creating course without categoryID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}}  {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating course with characters on categoryID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}a\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating course with special characters on categoryID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"__//;;\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when creating course with not existing categoryID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Unable to find category record(s)' appears\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Unable to find category record(s)\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"50000000\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Testing different methods instead of POST/GET/PATCH",
							"item": [
								{
									"name": "Create course as teacher with PUT method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' appears\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create course as teacher with DELETE method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' appears\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create course as teacher with HEAD method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "HEAD",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create course as teacher with OPTIONS method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Update courses",
					"item": [
						{
							"name": "Course update by different users",
							"item": [
								{
									"name": "Update course as admin created by himself",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Course id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course title is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Course description is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"description\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course visibility is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"visible\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Category id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"categoryId\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id1}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when an admin updates a course created by other user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Bug: Status code should be 403 and not 404. \r",
													"//Additionally: The error message should be more explicit.\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Unable to find course record(s)' appears\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id4}},\r\n  \"title\": \"How to bake {{$randomInt}}  {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}}  {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update course as teacher created by himself",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Course id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course title is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Course description is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"description\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course visibility is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"visible\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Category id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"categoryId\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"//Adding new course title and description to the collection variables\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"course_title2\", jsonData.title);\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"course_description1\", jsonData.description);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when a teacher updates a course created by other user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Bug: Status code should be 403 and not 404. \r",
													"//Additionally: The error message should be more explicit.\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Unable to find course record(s)' appears\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id1}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when student tries to update a course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'This action is forbidden for role student' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{student_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id1}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a course without changing any parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Course id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course title is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Course description is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"description\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course visibility is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"visible\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Category id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"categoryId\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"updatedAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"updatedAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"createdAt key is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"createdAt\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"{{course_title2}}\",\r\n  \"description\": \"{{course_description1}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update courses as teacher",
							"item": [
								{
									"name": "Id field testing",
									"item": [
										{
											"name": "Error when updating a course with id field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric' appears\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"\",\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with spaces on id field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric' appears\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"     \",\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with characters on id field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric' appears\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}a\",\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with special characters on id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric' appears\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"_//__\",\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with not existing id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Unable to find course record(s)' appears\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 500000000,\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Title text field testing",
									"item": [
										{
											"name": "Error when updating a course with no title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Minimum course title length is: 3' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum course title length is: 3\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with only spaces on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'You are not allowed to use spaces only' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"       \",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with 2 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Minimum course title length is: 3' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum course title length is: 3\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with 3 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with 4 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with 99 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"{{99charac}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with 100 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"{{100charac}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with 101 characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Maximum course title length is: 100' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum course title length is: 100\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"{{101charac}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with special characters on title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"{{$randomAlphaNumeric}}/{{$randomAlphaNumeric}}_{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Description text field testing",
									"item": [
										{
											"name": "Error when updating a course with no description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Minimum course description length is: 3' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum course description length is: 3\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with only spaces on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Bug: Course shouldn't be updated with only spaces on description text field, due to that the code should be 400 and not 200 \r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'You are not allowed to use spaces only' is presented\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"You are not allowed to use spaces only\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"      \",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with 2 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Minimum course description length is: 3\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Minimum course description length is: 3\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with 3 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with 4 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with 499 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{499charac}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with 500 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{500charac}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating a course with 501 characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Maximum course description length is: 500\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum course description length is: 500\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{501charac}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with special characters on description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}_{{$randomAlphaNumeric}}/{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}:;\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a course with existing description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"{{course_description}};\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Visible boolean field testing",
									"item": [
										{
											"name": "Update course to visibility false",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Course id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"id\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course title is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"title\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Category id is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"categoryId\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course description is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"description\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"Course visibility is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"visible\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"updatedAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"updatedAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															"pm.test(\"createdAt key is present in response\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    var expectedKey = \"createdAt\";\r",
															"    pm.expect(jsonData).to.have.property(expectedKey);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": false,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating course with characters on visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating course with spaces on visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": \"       \",\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating course with digits on visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": 123,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating course with empty visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": \"\",\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating course with null on visible field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be boolean\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be boolean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": null,\r\n  \"categoryId\": {{cat_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CategoryID field testing",
									"item": [
										{
											"name": "Error when updating course without categoryID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": false,\r\n  \"categoryId\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating course with characters on categoryID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}a\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating course with special characters on categoryID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Parameter should be numeric\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"__//;;\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Error when updating course with not existing categoryID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message 'Unable to find category record(s)\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].msg).to.eql(\"Unable to find category record(s)\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{teacher_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\r\n{\r\n  \"id\": {{course_id2}},\r\n  \"title\": \"How to bake {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Baking {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"50000000\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Remove courses",
					"item": [
						{
							"name": "Delete course as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Result message is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"result\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete course as teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Result message is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"result\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id4}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Error when deleting course as student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message 'This action is forbidden for role student' is presented\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{student_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id5}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id5}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Error when deleting course without credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message 'Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id5}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id5}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Error when deleting a not existing course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message 'Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].msg).to.eql(\"Unable to find course record(s)\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/5000000",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"5000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Error when deleting a already deleted course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message 'Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].msg).to.eql(\"Unable to find course record(s)\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id4}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Error when deleting a course with characters on course id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id6}}a",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id6}}a"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get courses",
					"item": [
						{
							"name": "Get courses list",
							"item": [
								{
									"name": "Admin gets courses list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Teacher gets courses list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Student gets courses list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{student_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Error trying to get courses list without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Unauthorized' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get specific course by Id",
							"item": [
								{
									"name": "Error when trying to get course info with not existing course id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Unable to find course record(s)' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/5000000000",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"5000000000"
											]
										}
									},
									"response": []
								},
								{
									"name": "Teacher gets course info with course id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Course id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course title is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course description is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"description\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course visibility is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"visible\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Category id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"categoryId\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Number of likes is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"likes\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Number of dislikes is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"dislikes\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id6}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id6}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Student gets course info with course id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Course id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course title is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course description is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"description\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course visibility is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"visible\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Category id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"categoryId\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Number of likes is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"likes\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Number of dislikes is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"dislikes\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{student_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id6}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id6}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin gets course info with course id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Course id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"id\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course title is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"title\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course description is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"description\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Course visibility is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"visible\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Category id is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"categoryId\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Number of likes is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"likes\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Number of dislikes is present in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var expectedKey = \"dislikes\";\r",
													"    pm.expect(jsonData).to.have.property(expectedKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id6}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id6}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when trying to get course info with course id without credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'Unauthorized' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error when trying to get course info with characters on course id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' is presented\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}a",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}a"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Testing different methods instead of GET/DELETE with /api/v1/courses/{courseId} endpoint",
							"item": [
								{
									"name": "Get course info with course id endpoint with OPTIONS method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id5}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id5}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get course info with course id endpoint with POST method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' appears\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id5}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id5}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get course info with course id endpoint with PUT method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' appears\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id5}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id5}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get course info with course id endpoint with PATCH method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message 'There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs' appears\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id5}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id5}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get course info with course id endpoint with PATCH method Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "HEAD",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id5}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id5}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "lecture 3",
			"item": [
				{
					"name": "e2e scenario 1 - Admin creates category",
					"item": [
						{
							"name": "Receive admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_1_token_1\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "6cXJLPzVLV=Y4h+_",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin account with admin credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of admin in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_1_admin_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_1_admin_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set the Authorization header\r",
											"var bearerToken = \"{{e2e_1_token_1}}\";\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: 'Bearer ' + bearerToken\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_1_token_1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive token of created admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_1_admin_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_1_admin_username}}\",\r\n    \"password\": \"{{e2e_1_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create category as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Title is present in reponse\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"// Updating the category id in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_1_category_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_1_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin gets category by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Title is present in reponse\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_1_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{e2e_1_category_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{e2e_1_category_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "e2e scenario 2 - Teacher creates a course",
					"item": [
						{
							"name": "Receive admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_2_token_1\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "6cXJLPzVLV=Y4h+_",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin account with admin credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of admin in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_2_admin_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_2_admin_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set the Authorization header\r",
											"var bearerToken = \"{{e2e_2_token_1}}\";\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: 'Bearer ' + bearerToken\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_2_token_1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive token of created admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_2_admin_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_2_admin_username}}\",\r\n    \"password\": \"{{e2e_2_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create category as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Title is present in reponse\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"// Updating the category id in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_2_category_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_2_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create teacher account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of teacher in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_2_teacher_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_2_teacher_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive teacher token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created teacher accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_2_teacher_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_2_teacher_username}}\",\r\n    \"password\": \"{{e2e_2_teacher_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create course as teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Course id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course title is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Category id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"categoryId\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course description is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"description\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course visibility is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"visible\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating generated course id, title and description in the collection variables\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_2_course_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_2_teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{e2e_2_category_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher gets course info with course id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Course id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course title is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course description is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"description\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course visibility is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"visible\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Category id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"categoryId\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Number of likes is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"likes\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Number of dislikes is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"dislikes\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_2_teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2e_2_course_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2e_2_course_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "e2e scenario 3 - Teacher adds materials on a created course",
					"item": [
						{
							"name": "Receive admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_3_token_1\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "6cXJLPzVLV=Y4h+_",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin account with admin credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of admin in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_3_admin_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_3_admin_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set the Authorization header\r",
											"var bearerToken = \"{{e2e_3_token_1}}\";\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: 'Bearer ' + bearerToken\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_3_token_1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive token of created admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_3_admin_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_3_admin_username}}\",\r\n    \"password\": \"{{e2e_3_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create category as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Title is present in reponse\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"// Updating the category id in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_3_category_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_3_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create teacher account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of teacher in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_3_teacher_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_3_teacher_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive teacher token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created teacher accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_3_teacher_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_3_teacher_username}}\",\r\n    \"password\": \"{{e2e_3_teacher_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create course as teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Course id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course title is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Category id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"categoryId\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course description is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"description\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course visibility is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"visible\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating generated course id, title and description in the collection variables\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_3_course_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_3_teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{e2e_3_category_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher adds materials to the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Course id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course title is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Data is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"data\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Order is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"order\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"CourseId is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"courseId\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_3_teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"title\": \"My first {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n\"data\": \"How to use {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n\"order\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2e_3_course_id}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2e_3_course_id}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher gets the materials on the created course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseJson = pm.response.json();\r",
											"pm.test(\"Response contains 'id' field\", function () {\r",
											"    pm.expect(responseJson[0]).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'title' field\", function () {\r",
											"    pm.expect(responseJson[0]).to.have.property('title');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'data' field\", function () {\r",
											"    pm.expect(responseJson[0]).to.have.property('data');\r",
											"});\r",
											"pm.test(\"Response contains 'order' field\", function () {\r",
											"    pm.expect(responseJson[0]).to.have.property('order');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'courseId' field\", function () {\r",
											"    pm.expect(responseJson[0]).to.have.property('courseId');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_3_teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2e_3_course_id}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2e_3_course_id}}",
										"materials"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "e2e scenario 4 - Student enrolls on a created course",
					"item": [
						{
							"name": "Receive admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_4_token_1\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "6cXJLPzVLV=Y4h+_",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin account with admin credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of admin in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_4_admin_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_4_admin_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set the Authorization header\r",
											"var bearerToken = \"{{e2e_4_token_1}}\";\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: 'Bearer ' + bearerToken\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_4_token_1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive token of created admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_4_admin_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_4_admin_username}}\",\r\n    \"password\": \"{{e2e_4_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create category as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Title is present in reponse\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"// Updating the category id in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_4_category_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_4_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create teacher account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of teacher in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_4_teacher_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_4_teacher_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive teacher token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created teacher accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_4_teacher_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_4_teacher_username}}\",\r\n    \"password\": \"{{e2e_4_teacher_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create course as teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Course id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course title is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Category id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"categoryId\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course description is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"description\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course visibility is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"visible\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating generated course id, title and description in the collection variables\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_4_course_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_4_teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{e2e_4_category_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create student account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(3);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of student in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_4_student_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_4_student_password\", extractedValue);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive student token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created student accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_4_student_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_4_student_username}}\",\r\n    \"password\": \"{{e2e_4_student_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll on course with student account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message 'You've successfully enrolled the course' is presented\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"You've successfully enrolled the course\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_4_student_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2e_4_course_id}}/enroll",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2e_4_course_id}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student checks the enrolled courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"let responseJson = pm.response.json();\r",
											"pm.test(\"Response should contain 'courseId'\", function () {\r",
											"    pm.expect(responseJson[0]).to.have.property('courseId');\r",
											"});\r",
											"pm.test(\"Response should contain 'userId'\", function () {\r",
											"    pm.expect(responseJson[0]).to.have.property('userId');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_4_student_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/mine",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"mine"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "e2e scenario 5 - Student likes a course",
					"item": [
						{
							"name": "Receive admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_5_token_1\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "6cXJLPzVLV=Y4h+_",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin account with admin credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of admin in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_5_admin_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_5_admin_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set the Authorization header\r",
											"var bearerToken = \"{{e2e_5_token_1}}\";\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: 'Bearer ' + bearerToken\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_5_token_1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive token of created admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created admin accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_5_admin_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_5_admin_username}}\",\r\n    \"password\": \"{{e2e_5_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create category as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 bugs = lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Title is present in reponse\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"// Updating the category id in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_5_category_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_5_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} basics\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create teacher account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of teacher in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_5_teacher_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_5_teacher_password\", extractedValue);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"teacher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive teacher token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created teacher accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_5_teacher_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_5_teacher_username}}\",\r\n    \"password\": \"{{e2e_5_teacher_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create course as teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 2 errors= lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Course id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course title is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Category id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"categoryId\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course description is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"description\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course visibility is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"visible\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating generated course id, title and description in the collection variables\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_5_course_id\", jsonData.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_5_teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"How to prepare {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}}\",\r\n  \"description\": \"Washing {{$randomInt}} {{$randomProductAdjective}} {{$randomProductMaterial}} {{$randomProduct}} techniques\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{e2e_5_category_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create student account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 3 bugs = Mismatch of role number in test and requirements; lack of updatedAt key/value pair; lack of createddAt key/value pair  \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"username\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"email is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"email\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"First name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"firstName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"lastName\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"role\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Role value is 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.role).to.eql(3);\r",
											"});\r",
											"\r",
											"pm.test(\"updatedAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"updatedAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt key is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"createdAt\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"\r",
											"// Updating the username and password of student in the collection variables\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"e2e_5_student_username\", jsonData.username);\r",
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"var extractedValue = requestBody.password;\r",
											"pm.collectionVariables.set(\"e2e_5_student_password\", extractedValue);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\": \"{{$randomProductAdjective}}{{$randomInt}}.{{$randomFirstName}}{{$randomInt}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"andre.luz+{{$randomInt}}{{$randomInt}}{{domain}}\",\r\n\"password\": \"{{$randomPassword}}\",\r\n\"role\": \"student\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receive student token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Receive created student accesstoken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2e_5_student_token\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2e_5_student_username}}\",\r\n    \"password\": \"{{e2e_5_student_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student likes a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message 'You've liked the course' is presented\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"You've liked the course\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_5_student_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2e_5_course_id}}/like/yes",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2e_5_course_id}}",
										"like",
										"yes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student checks likes on the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Course id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"id\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course title is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"title\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course description is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"description\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Course visibility is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"visible\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Category id is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"categoryId\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Number of likes is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"likes\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});\r",
											"\r",
											"pm.test(\"Number of dislikes is present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedKey = \"dislikes\";\r",
											"    pm.expect(jsonData).to.have.property(expectedKey);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2e_4_student_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2e_5_course_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2e_5_course_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://qa-school-test-api.quantori.academy",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "admin_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjExNjYsInJvbGVJZCI6MywiaWF0IjoxNjkzNzU4MjgxLCJleHAiOjE2OTM3NjU0ODF9.AN3QMDGo13kviAGI1ChFI96jK88zadCRzngwMn7m04Y",
			"type": "string"
		},
		{
			"key": "teacher_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjExNzIsInJvbGVJZCI6MiwiaWF0IjoxNjkzNzU3NDMxLCJleHAiOjE2OTM3NjQ2MzF9.npvkFcxQQqdPOwVc0BhBOPDKDLgweHLGy12oSypnivc",
			"type": "string"
		},
		{
			"key": "student_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjExNzQsInJvbGVJZCI6MSwiaWF0IjoxNjkzNzU3NTIzLCJleHAiOjE2OTM3NjQ3MjN9.4NTk_rx07Pk7DJcuAknWD6I2WOdoywnpV2zGWn9bVKQ",
			"type": "string"
		},
		{
			"key": "domain",
			"value": "@quantori.academy",
			"type": "string"
		},
		{
			"key": "admin_username",
			"value": ""
		},
		{
			"key": "admin_password",
			"value": ""
		},
		{
			"key": "teacher_username",
			"value": ""
		},
		{
			"key": "teacher_password",
			"value": ""
		},
		{
			"key": "student_username",
			"value": ""
		},
		{
			"key": "student_password",
			"value": ""
		},
		{
			"key": "cat_id",
			"value": ""
		},
		{
			"key": "course_id",
			"value": ""
		},
		{
			"key": "course_id2",
			"value": ""
		},
		{
			"key": "course_title",
			"value": ""
		},
		{
			"key": "course_description",
			"value": ""
		},
		{
			"key": "course_id1",
			"value": ""
		},
		{
			"key": "course_id3",
			"value": ""
		},
		{
			"key": "course_id4",
			"value": ""
		},
		{
			"key": "course_id5",
			"value": ""
		},
		{
			"key": "course_id6",
			"value": ""
		},
		{
			"key": "course_title1",
			"value": ""
		},
		{
			"key": "course_title2",
			"value": ""
		},
		{
			"key": "course_description1",
			"value": ""
		},
		{
			"key": "token_1",
			"value": ""
		},
		{
			"key": "admin_username_1",
			"value": ""
		},
		{
			"key": "admin_password_1",
			"value": ""
		},
		{
			"key": "admin_token_1",
			"value": ""
		},
		{
			"key": "teacher_username_1",
			"value": ""
		},
		{
			"key": "teacher_password_1",
			"value": ""
		},
		{
			"key": "teacher_token_1",
			"value": ""
		},
		{
			"key": "student_username_1",
			"value": ""
		},
		{
			"key": "student_password_1",
			"value": ""
		},
		{
			"key": "student_token_1",
			"value": ""
		},
		{
			"key": "category_id",
			"value": ""
		},
		{
			"key": "category_id1",
			"value": ""
		},
		{
			"key": "e2e_1_token_1",
			"value": ""
		},
		{
			"key": "e2e_1_admin_username",
			"value": ""
		},
		{
			"key": "e2e_1_admin_password",
			"value": ""
		},
		{
			"key": "e2e_1_admin_token",
			"value": ""
		},
		{
			"key": "e2e_1_category_id",
			"value": ""
		},
		{
			"key": "e2e_2_token_1",
			"value": ""
		},
		{
			"key": "e2e_2_admin_username",
			"value": ""
		},
		{
			"key": "e2e_2_admin_password",
			"value": ""
		},
		{
			"key": "e2e_2_admin_token",
			"value": ""
		},
		{
			"key": "e2e_2_category_id",
			"value": ""
		},
		{
			"key": "e2e_2_teacher_username",
			"value": ""
		},
		{
			"key": "e2e_2_teacher_password",
			"value": ""
		},
		{
			"key": "e2e_2_teacher_token",
			"value": ""
		},
		{
			"key": "e2e_2_course_id",
			"value": ""
		},
		{
			"key": "e2e_3_token_1",
			"value": ""
		},
		{
			"key": "e2e_3_admin_username",
			"value": ""
		},
		{
			"key": "e2e_3_admin_password",
			"value": ""
		},
		{
			"key": "e2e_3_admin_token",
			"value": ""
		},
		{
			"key": "e2e_3_category_id",
			"value": ""
		},
		{
			"key": "e2e_3_teacher_username",
			"value": ""
		},
		{
			"key": "e2e_3_teacher_password",
			"value": ""
		},
		{
			"key": "e2e_3_teacher_token",
			"value": ""
		},
		{
			"key": "e2e_3_course_id",
			"value": ""
		},
		{
			"key": "e2e_4_token_1",
			"value": ""
		},
		{
			"key": "e2e_4_admin_username",
			"value": ""
		},
		{
			"key": "e2e_4_admin_password",
			"value": ""
		},
		{
			"key": "e2e_4_admin_token",
			"value": ""
		},
		{
			"key": "e2e_4_category_id",
			"value": ""
		},
		{
			"key": "e2e_4_teacher_username",
			"value": ""
		},
		{
			"key": "e2e_4_teacher_password",
			"value": ""
		},
		{
			"key": "e2e_4_teacher_token",
			"value": ""
		},
		{
			"key": "e2e_4_course_id",
			"value": ""
		},
		{
			"key": "e2e_4_student_username",
			"value": ""
		},
		{
			"key": "e2e_4_student_password",
			"value": ""
		},
		{
			"key": "e2e_4_student_token",
			"value": ""
		},
		{
			"key": "e2e_5_token_1",
			"value": ""
		},
		{
			"key": "e2e_5_admin_username",
			"value": ""
		},
		{
			"key": "e2e_5_admin_password",
			"value": ""
		},
		{
			"key": "e2e_5_admin_token",
			"value": ""
		},
		{
			"key": "e2e_5_category_id",
			"value": ""
		},
		{
			"key": "e2e_5_teacher_username",
			"value": ""
		},
		{
			"key": "e2e_5_teacher_password",
			"value": ""
		},
		{
			"key": "e2e_5_teacher_token",
			"value": ""
		},
		{
			"key": "e2e_5_course_id",
			"value": ""
		},
		{
			"key": "e2e_5_student_username",
			"value": ""
		},
		{
			"key": "e2e_5_student_password",
			"value": ""
		},
		{
			"key": "e2e_5_student_token",
			"value": ""
		}
	]
}